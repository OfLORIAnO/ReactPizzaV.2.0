import React, { useCallback, useEffect, useRef } from 'react';
import qs from 'qs';
import PizzaBlock from '../components/PizzaBlock';
import Skeleton from '../components/PizzaBlock/Skeleton';
import Categories from '../components/Categories';
import Sort from '../components/Sort';

import Pagination from '../Pagination';

import { list } from '../components/Sort';
import { useSelector } from 'react-redux';
import {
    selectFilter,
    setCategoryId,
    setFilters,
} from '../redux/slices/filterSlice';
import {
    fetchPizzas,
    selectPizzaData,
} from '../redux/slices/pizzasSlice';
import { useLocation, useNavigate } from 'react-router-dom';
import { RootState, useAppDispatch } from '../redux/store';
import { AllPizzaType, Status } from '../redux/types';

const Home: React.FC = () => {
    const location = useLocation();
    const navigate = useNavigate();
    const dispatch = useAppDispatch();
    const isSearch = useRef(false);
    const isMounted = useRef(false);
    //! –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ redux toolkit store
    const { currentPage, desc, categoryId, sort } = useSelector(selectFilter);
    const { items, status } = useSelector(selectPizzaData);

    //!–§-–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const onChangeCategory = useCallback((id: number) => {
        dispatch(setCategoryId(id));
    }, []);

    const searchValue = useSelector(
        (state: RootState) => state.filter.searchValue
    );

    //! –§-–∏–π –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ MockAPI
    const getPizzas = () => {
        //! –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const sortBy: string = `&sortBy=${sort.sortProperty}`;
        const order: string = `&order=${desc}`;
        const category: string =
            categoryId > 0 ? `&category=${+categoryId}` : '';
        const search: string = searchValue ? `&search=${searchValue}` : '';
        const page: string = `&page=${+currentPage}`;
        const limit: string = `&limit=4`;
        dispatch(
            fetchPizzas({
                sortBy,
                order,
                category,
                search,
                page,
                limit,
            })
        );
    };
    //! –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–∏—á–∫–∏ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ—Ä–º—ã
    useEffect(() => {
        if (window.location.search) {
            const params = qs.parse(window.location.search.substring(1));
            const descParam: 'desc' | 'asc' =
                params.desc === 'desc' ? 'desc' : 'asc';
            const paramsWIthType = {
                categoryId: Number(params.categoryId),
                currentPage: Number(params.currentPage),
                desc: descParam,
                sortBy: String(params.sortBy),
            };
            const sort = list.find((obj) => obj.sortProperty === params.sortBy);

            sort &&
                dispatch(
                    setFilters({
                        ...paramsWIthType,
                        sort,
                    })
                );
            isSearch.current = true;
        }
    }, []);
    //! –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –ø–∞—Ä—Å–∏–Ω–≥—É –ø–∏—Ü—Ü
    useEffect(() => {
        if (isMounted.current || location.pathname === '/') {
            getPizzas();
        }
        isSearch.current = false;
    }, [categoryId, sort, desc, searchValue, currentPage]);
    //! –ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ—Ç –Ω–∞ —Å—Å—ã–ª–∫—É, –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    useEffect(() => {
        if (isMounted.current) {
            const quertyString = qs.stringify({
                categoryId,
                currentPage,
                desc,
                sortBy: sort.sortProperty,
            });
            navigate(`?${quertyString}`);
        }
        isMounted.current = true;
    }, [categoryId, sort, desc, currentPage]);

    //! –°–ø–∏—Å–æ–∫ –ø–∏—Ü—Ü
    const pizzas = items.map((obj: AllPizzaType) => (
        <PizzaBlock key={obj.id} {...obj} />
    ));
    //! –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–µ–ª–µ—Ç–æ–Ω–æ–≤
    const skeletons = [...new Array(6)].map((_, i) => {
        return <Skeleton key={i} />;
    });

    return (
        <div className='container'>
            <div className='content__top'>
                <Categories
                    value={categoryId}
                    onChangeCategory={onChangeCategory}
                />
                <Sort />
            </div>
            <h2 className='content__title'>–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
            <div className='content__items'>
                {status === Status.ERROR ? (
                    <div className={'content__error-info'}>
                        <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ü•≤</h2>
                        <p>
                            –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ
                            –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ
                        </p>
                    </div>
                ) : status === Status.LOADING ? (
                    skeletons
                ) : (
                    pizzas
                )}
            </div>
            <Pagination />
        </div>
    );
};
export default Home;
